# Setup

[config]
skip_core_tasks = true

[tasks.docs_init]
command = "pnpm"
args = ["i"]

# Development

[tasks.docs_generate]
dependencies = ["docs_init"]
command = "cargo"
args = ["run", "--features", "docs"]

[tasks.docs_preview]
dependencies = ["docs_generate"]
command = "npx"
args = ["redocly", "preview-docs", "target/openapi.yaml"]

[tasks.check]
command = "cargo"
args = ["check"]

[tasks.clippy]
command = "cargo"
args = ["clippy", "--features", "postgres", "--", "-D", "warnings"]

[tasks.oidc-server-mock]
script = "docker compose -f testing/oidc-mock/docker-compose.yaml up -d"

# Postgres
[tasks.postgres_database]
script = "docker run --name postgres -e POSTGRES_PASSWORD=password -e POSTGRES_USERNAME=postgres -p 5150:5432 -d postgres && sleep 1"

[tasks.postgres_tests]
env = { DATABASE = "POSTGRES", POSTGRES_USERNAME = "postgres", POSTGRES_PASSWORD = "password", POSTGRES_ENDPOINT = "localhost:5150", POSTGRES_DATABASE = "postgres", "OIDC_DISCOVERY_URL" = "http://localhost:5151", OIDC_CLIENT_ID = "client", OIDC_CLIENT_SECRET = "secret", RUST_LOG = "DEBUG", OIDC_SCOPE = "api:feedback-fusion" }
command = "cargo"
args = [
  "test",
  "--no-default-features",
  "--features",
  "postgres,test",
  "--",
  "--nocapture",
  "--test-threads=1",
]

[tasks.postgres]
run_task = { name = [
  "oidc-server-mock",
  "postgres_database",
  "postgres_tests",
], fork = true, cleanup_task = "postgres_cleanup" }

[tasks.postgres_cleanup]
script = "docker kill postgres;docker rm postgres;docker kill oidc-server-mock;docker rm oidc-server-mock"

[tasks.test]
run_task = { name = ["postgres"] }

# OpenAPI build

[tasks.docs_lint]
dependencies = ["docs_generate"]
command = "npx"
args = [
  "redocly",
  "lint",
  "--skip-rule=no-empty-servers",
  "--skip-rule=info-license-url",
  "target/openapi.yaml",
]

[tasks.docs_build]
dependencies = ["docs_lint"]
command = "npx"
args = ["redocly", "build-docs", "target/openapi.yaml", "-o", "docs/index.html"]
